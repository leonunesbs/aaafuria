// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  memberships   Membership[]
  accounts      Account[]
  sessions      Session[]
  groups        Group[]
  payments      Payment[]
  orders        Order[]

  interestedSchedules Schedule[] @relation("Interested")
  presentSchedules    Schedule[] @relation("Present")
}

model Profile {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  registration String?
  studyClass   String?
  birth        DateTime?
  rg           String?
  cpf          String?
  phone        String?
}

model Group {
  id       String     @id @default(cuid())
  name     String
  type     String
  users    User[]
  Schedule Schedule[]
}

model Schedule {
  id      String @id @default(cuid())
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  name        String
  description String?
  location    String
  start       DateTime
  end         DateTime?

  interestedUsers User[] @relation("Interested")
  presentUsers    User[] @relation("Present")
}

model Plan {
  id           String  @id @default(cuid())
  name         String
  price        Float
  periodInDays Int
  isActive     Boolean @default(true)

  memberships Membership[]
}

model Membership {
  id     String  @id @default(cuid())
  plan   Plan?   @relation(fields: [planId], references: [id], onDelete: SetNull)
  planId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate   DateTime

  paymentId String?  @unique
  payment   Payment? @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
}

model Item {
  id String @id @default(cuid())

  parentId  String?
  parent    Item?   @relation("ItemToItem", fields: [parentId], references: [id])
  childrens Item[]  @relation("ItemToItem")

  name        String
  description String

  price    Float
  currency String

  stock  Int @default(0)
  rating Int @default(0)

  staffPrice       Float?
  coordinatorPrice Float?
  athletePrice     Float?
  memberPrice      Float?

  isAnalog  Boolean @default(false)
  isDigital Boolean @default(false)

  isMemberExclusive      Boolean @default(false)
  isAthleteExclusive     Boolean @default(false)
  isCoordinatorExclusive Boolean @default(false)
  isStaffExclusive       Boolean @default(false)

  OrderItem OrderItem[]
}

model OrderItem {
  id String @id @default(cuid())

  orderId String
  itemId  String

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item  Item  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  quantity Int
  price    Float
  currency String

  ordered    Boolean @default(false)
  checkedOut Boolean @default(false)
}

model Order {
  id String @id @default(cuid())

  items OrderItem[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  paymentId String?  @unique
  payment   Payment? @relation(fields: [paymentId], references: [id])

  ordered    Boolean @default(false)
  checkedOut Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id         String   @id @default(cuid())
  userId     String
  refId      String?  @unique
  method     String
  amount     Float
  currency   String
  paid       Boolean  @default(false)
  expired    Boolean  @default(false)
  canceled   Boolean  @default(false)
  attachment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership Membership?
  order      Order?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
