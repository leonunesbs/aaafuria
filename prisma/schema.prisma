generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String?      @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  memberships         Membership[]
  orders              Order[]
  payments            Payment[]
  profile             Profile?
  sessions            Session[]
  groups              Group[]      @relation("GroupToUser")
  interestedSchedules Schedule[]   @relation("Interested")
  presentSchedules    Schedule[]   @relation("Present")
}

model Profile {
  id           String    @id @default(cuid())
  userId       String    @unique
  registration String?
  studyClass   String?
  birth        DateTime?
  rg           String?
  cpf          String?
  phone        String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        String     @id @default(cuid())
  name      String
  type      String
  schedules Schedule[]
  users     User[]     @relation("GroupToUser")
}

model Schedule {
  id              String    @id @default(cuid())
  groupId         String
  location        String
  description     String?
  start           DateTime
  end             DateTime?
  group           Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  interestedUsers User[]    @relation("Interested")
  presentUsers    User[]    @relation("Present")
}

model Plan {
  id           String       @id @default(cuid())
  name         String
  price        Float
  periodInDays Int
  isActive     Boolean      @default(true)
  memberships  Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  planId    String?
  userId    String
  startDate DateTime
  endDate   DateTime
  paymentId String?  @unique
  createdAt DateTime @default(now())
  payment   Payment? @relation(fields: [paymentId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan?    @relation(fields: [planId], references: [id])
}

model Item {
  id                     String      @id @default(cuid())
  parentId               String?
  name                   String
  description            String
  price                  Float
  currency               String
  stock                  Int         @default(0)
  rating                 Int         @default(0)
  staffPrice             Float?
  coordinatorPrice       Float?
  athletePrice           Float?
  memberPrice            Float?
  isAnalog               Boolean     @default(false)
  isDigital              Boolean     @default(false)
  isMemberExclusive      Boolean     @default(false)
  isAthleteExclusive     Boolean     @default(false)
  isCoordinatorExclusive Boolean     @default(false)
  isStaffExclusive       Boolean     @default(false)
  parent                 Item?       @relation("ItemToItem", fields: [parentId], references: [id])
  childrens              Item[]      @relation("ItemToItem")
  OrderItem              OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  itemId     String
  quantity   Int
  price      Float
  currency   String
  ordered    Boolean @default(false)
  checkedOut Boolean @default(false)
  item       Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  paymentId  String?     @unique
  ordered    Boolean     @default(false)
  checkedOut Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  payment    Payment?    @relation(fields: [paymentId], references: [id])
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      OrderItem[]
}

model Payment {
  id         String      @id @default(cuid())
  userId     String
  refId      String?     @unique
  method     String
  amount     Float
  currency   String
  paid       Boolean     @default(false)
  expired    Boolean     @default(false)
  canceled   Boolean     @default(false)
  attachment String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  membership Membership?
  order      Order?
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
